{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nimport EditSong_Transaction from '../transactions/EditSong_Transaction';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n  MARK_SONG_TO_EDIT: \"MARK_SONG_TO_EDIT\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listMarkedForDeletion: null,\n    deleteListName: null,\n    deleteSongId: null,\n    deleteSongName: null,\n    songEditIndex: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            deleteListName: null,\n            deleteSongId: null,\n            deleteSongName: null,\n            songEditIndex: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            deleteListName: null,\n            deleteSongId: null,\n            deleteSongName: null,\n            songEditIndex: null\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            deleteListName: null,\n            deleteSongId: null,\n            deleteSongName: null,\n            songEditIndex: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            deleteListName: null,\n            deleteSongId: null,\n            deleteSongName: null,\n            songEditIndex: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: payload._id,\n            deleteListName: payload.name,\n            deleteSongId: null,\n            deleteSongName: null,\n            songEditIndex: null\n          });\n        }\n      // EDIT A SONG\n      case GlobalStoreActionType.MARK_SONG_TO_EDIT:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            deleteListName: null,\n            deleteSongId: null,\n            deleteSongName: null,\n            songEditIndex: payload\n          });\n        }\n      // PREPARE A SONG FOR DELETION\n      case GlobalStoreActionType.MARK_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            deleteListName: null,\n            deleteSongId: payload._id,\n            deleteSongName: payload.title,\n            songEditIndex: null\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            deleteListName: null,\n            deleteSongId: null,\n            deleteSongName: null,\n            songEditIndex: null\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listMarkedForDeletion: null,\n            deleteListName: null,\n            deleteSongId: null,\n            deleteSongName: null,\n            songEditIndex: null\n          });\n        }\n      default:\n        return store;\n    }\n  };\n\n  // TRANSACTIONS \n\n  store.addSongTransaction = function () {\n    let transaction = new AddSong_Transaction(store);\n    tps.addTransaction(transaction);\n  };\n  store.addMoveSongTransaction = function (start, end) {\n    let transaction = new MoveSong_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n  store.addDeleteSongTransaction = function () {\n    let transaction = new DeleteSong_Transaction(store, store.currentList.songs.findIndex(song => {\n      return song._id === store.deleteSongId;\n    }));\n    tps.addTransaction(transaction);\n  };\n  store.addEditSongTransaction = function (index, title, artist, link) {};\n  store.addSong = function () {\n    let id = store.currentList._id;\n    async function asyncAddSong(id) {\n      const response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        let newPlaylist = JSON.parse(JSON.stringify(playlist));\n        newPlaylist.songs.push({\n          title: \"Untitled\",\n          artist: \"Unknown\",\n          youTubeId: \"dQw4w9WgXcQ\"\n        });\n        const addedSong = await api.updatePlaylistById(id, newPlaylist);\n        if (addedSong.data.success) {\n          store.updateCurrentList();\n        }\n      }\n    }\n    asyncAddSong(id);\n  };\n\n  // THIS FUNCTION MOVES THE SONGS\n\n  store.moveSong = function (start, end) {\n    async function asyncMoveSong(start, end) {\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let list = response.data.playlist;\n        if (start < end) {\n          let temp = list.songs[start];\n          for (let i = start; i < end; i++) {\n            list.songs[i] = list.songs[i + 1];\n          }\n          list.songs[end] = temp;\n        } else if (start > end) {\n          let temp = list.songs[start];\n          for (let i = start; i > end; i--) {\n            list.songs[i] = list.songs[i - 1];\n          }\n          list.songs[end] = temp;\n        }\n        const updatedList = await api.updatePlaylistById(store.currentList._id, list);\n        if (updatedList.data.success) {\n          store.updateCurrentList();\n        }\n      }\n    }\n    asyncMoveSong(start, end);\n  };\n\n  // THIS FUNCTION CREATES A NEW LIST\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      const response = await api.createPlaylist();\n      if (response.data.success) {\n        let newPlaylist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.CREATE_NEW_LIST,\n            payload: newPlaylist\n          });\n          store.history.push(\"/playlist\" + newPlaylist._id);\n          // store.setNewList(newPlaylist._id);\n        }\n      }\n    }\n\n    asyncCreateNewList();\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n  store.markListForDeletion = function (id) {\n    async function asyncSetDeleteList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: playlist\n          });\n          store.showDeleteListModal();\n        }\n      }\n    }\n    asyncSetDeleteList(id);\n  };\n  store.deleteList = function (id) {\n    async function processDelete(id) {\n      console.log(id);\n      let response = await api.deletePlaylistById(id);\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        store.history.push(\"/\");\n      }\n    }\n    processDelete(id);\n  };\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n    store.hideDeleteListModal();\n  };\n  store.showDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.markSongForDeletion = function (index) {\n    async function asyncSetSongforDeletion(index) {\n      const response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        let songToDelete = playlist.songs[index];\n        storeReducer({\n          type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n          payload: songToDelete\n        });\n        store.showDeleteSongModal();\n      }\n    }\n    asyncSetSongforDeletion(index);\n  };\n  store.deleteSong = function () {\n    async function processDeleteSong() {\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        let newSongs = playlist.songs.filter(song => song._id !== store.deleteSongId);\n        playlist.songs = newSongs;\n        response = await api.updatePlaylistById(store.currentList._id, playlist);\n        if (response.data.success) {\n          store.updateCurrentList();\n        }\n      }\n    }\n    processDeleteSong();\n  };\n  store.deleteMarkedSong = function () {\n    store.deleteSong();\n    store.hideDeleteSongModal();\n  };\n  store.showDeleteSongModal = function () {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteSongModal = function () {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  // PROCESS FOR EDITING A SONG\n\n  store.markSongToEdit = function (index) {\n    async function asyncSetSongToEdit(index) {\n      const response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.MARK_SONG_TO_EDIT,\n          payload: index\n        });\n        store.setEditInnerText(index);\n        store.showEditSongModal();\n      }\n    }\n    asyncSetSongToEdit(index);\n  };\n  store.editSong = function (index, title, artist, link) {\n    async function asyncSetSongToEdit(index) {\n      const response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        let editedSong = playlist.songs[index];\n        editedSong.title = title;\n        editedSong.artist = artist;\n        editedSong.youTubeId = link;\n        playlist.songs[index] = editedSong;\n        let updatedPlaylist = await api.updatePlaylistById(store.currentList._id, playlist);\n        if (updatedPlaylist.data.success) {\n          store.updateCurrentList();\n        }\n      }\n    }\n    asyncSetSongToEdit(index);\n  };\n  store.editMarkedSong = function (title, artist, link) {\n    store.editSong(store.songEditIndex, title, artist, link);\n    store.hideEditSongModal();\n  };\n  store.setEditInnerText = function (index) {\n    let curSong = store.currentList.songs[index];\n    console.log(curSong.title);\n    document.getElementById('edit-song-modal-title-textfield').value = curSong.title;\n    document.getElementById('edit-song-modal-artist-textfield').value = curSong.artist;\n    document.getElementById('edit-song-modal-youTubeId-textfield').value = curSong.youTubeId;\n  };\n  store.showEditSongModal = function () {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideEditSongModal = function () {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.setIsListNameEditActive = function () {\n    store.setlistNameActive();\n  };\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n        }\n      }\n    }\n    asyncUpdateCurrentList();\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"Su3JfqEaMmtrJK9wDzsdbM3p9f0=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","AddSong_Transaction","MoveSong_Transaction","EditSong_Transaction","DeleteSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","MARK_SONG_FOR_DELETION","MARK_SONG_TO_EDIT","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listMarkedForDeletion","deleteListName","deleteSongId","deleteSongName","songEditIndex","storeReducer","action","type","payload","_id","name","title","addSongTransaction","transaction","addTransaction","addMoveSongTransaction","start","end","addDeleteSongTransaction","songs","findIndex","song","addEditSongTransaction","index","artist","link","addSong","id","asyncAddSong","response","getPlaylistById","data","success","playlist","newPlaylist","JSON","parse","stringify","push","youTubeId","addedSong","updatePlaylistById","updateCurrentList","moveSong","asyncMoveSong","list","temp","i","updatedList","createNewList","asyncCreateNewList","createPlaylist","history","changeListName","newName","asyncChangeListName","updateList","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","markListForDeletion","asyncSetDeleteList","showDeleteListModal","deleteList","processDelete","console","log","deletePlaylistById","loadIdNamePairs","deleteMarkedList","hideDeleteListModal","modal","document","getElementById","classList","add","remove","asyncLoadIdNamePairs","markSongForDeletion","asyncSetSongforDeletion","songToDelete","showDeleteSongModal","deleteSong","processDeleteSong","newSongs","filter","deleteMarkedSong","hideDeleteSongModal","markSongToEdit","asyncSetSongToEdit","setEditInnerText","showEditSongModal","editSong","editedSong","updatedPlaylist","editMarkedSong","hideEditSongModal","curSong","value","setCurrentList","asyncSetCurrentList","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setlistNameActive","setIsListNameEditActive","asyncUpdateCurrentList"],"sources":["C:/Users/skade/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\r\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\r\nimport EditSong_Transaction from '../transactions/EditSong_Transaction';\r\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    MARK_LIST_FOR_DELETION : \"MARK_LIST_FOR_DELETION\",\r\n    MARK_SONG_FOR_DELETION : \"MARK_SONG_FOR_DELETION\",\r\n    MARK_SONG_TO_EDIT : \"MARK_SONG_TO_EDIT\"\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        listMarkedForDeletion: null,\r\n        deleteListName : null,\r\n        deleteSongId : null,\r\n        deleteSongName : null,\r\n        songEditIndex : null,\r\n\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listMarkedForDeletion: null,\r\n                    deleteListName : null,\r\n                    deleteSongId : null,\r\n                    deleteSongName : null,\r\n                    songEditIndex: null,\r\n\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listMarkedForDeletion: null,\r\n                    deleteListName : null,\r\n                    deleteSongId : null,\r\n                    deleteSongName : null,\r\n                    songEditIndex : null,\r\n\r\n                })\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false,\r\n                    listMarkedForDeletion: null,\r\n                    deleteListName : null,\r\n                    deleteSongId : null,\r\n                    deleteSongName : null,\r\n                    songEditIndex : null,\r\n\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listMarkedForDeletion: null,\r\n                    deleteListName : null,\r\n                    deleteSongId : null,\r\n                    deleteSongName : null,\r\n                    songEditIndex : null,\r\n\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listMarkedForDeletion: payload._id,\r\n                    deleteListName : payload.name,\r\n                    deleteSongId : null,\r\n                    deleteSongName : null,\r\n                    songEditIndex : null,\r\n\r\n                });\r\n            }\r\n            // EDIT A SONG\r\n            case GlobalStoreActionType.MARK_SONG_TO_EDIT: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listMarkedForDeletion: null,\r\n                    deleteListName : null,\r\n                    deleteSongId : null,\r\n                    deleteSongName : null,\r\n                    songEditIndex : payload,\r\n\r\n                });\r\n            }\r\n            // PREPARE A SONG FOR DELETION\r\n            case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listMarkedForDeletion: null,\r\n                    deleteListName : null,\r\n                    deleteSongId : payload._id,\r\n                    deleteSongName : payload.title,\r\n                    songEditIndex : null,\r\n \r\n\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listMarkedForDeletion: null,\r\n                    deleteListName : null,\r\n                    deleteSongId : null,\r\n                    deleteSongName : null,\r\n                    songEditIndex : null,\r\n\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true,\r\n                    listMarkedForDeletion: null,\r\n                    deleteListName : null,\r\n                    deleteSongId : null,\r\n                    deleteSongName : null,\r\n                    songEditIndex : null,\r\n\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n\r\n    // TRANSACTIONS \r\n    \r\n\r\n    store.addSongTransaction = function() {\r\n        let transaction = new AddSong_Transaction(store);\r\n        tps.addTransaction(transaction);\r\n    }\r\n\r\n    store.addMoveSongTransaction = function(start,end) {\r\n        let transaction = new MoveSong_Transaction(store,start,end);\r\n        tps.addTransaction(transaction);\r\n    }\r\n\r\n    store.addDeleteSongTransaction = function() {\r\n        let transaction = new DeleteSong_Transaction(store,store.currentList.songs.findIndex(song => {\r\n            return song._id === store.deleteSongId;\r\n        }))\r\n        tps.addTransaction(transaction);\r\n    }\r\n\r\n    store.addEditSongTransaction = function (index,title,artist,link) {\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    store.addSong = function() {\r\n        let id = store.currentList._id;\r\n        async function asyncAddSong(id) {\r\n            const response = await api.getPlaylistById(id);\r\n            \r\n            if(response.data.success){\r\n                let playlist = response.data.playlist;\r\n                let newPlaylist = JSON.parse(JSON.stringify(playlist));\r\n                newPlaylist.songs.push({\r\n                    title: \"Untitled\",\r\n                    artist: \"Unknown\",\r\n                    youTubeId: \"dQw4w9WgXcQ\"\r\n                });\r\n                const addedSong = await api.updatePlaylistById(id,newPlaylist);\r\n                if (addedSong.data.success){\r\n                    store.updateCurrentList();\r\n                    }\r\n                }\r\n            }\r\n            asyncAddSong(id);\r\n        }\r\n\r\n    // THIS FUNCTION MOVES THE SONGS\r\n\r\n    store.moveSong = function(start,end) {\r\n        async function asyncMoveSong(start,end){\r\n            let response = await api.getPlaylistById(store.currentList._id);\r\n            if(response.data.success){\r\n                let list = response.data.playlist;\r\n\r\n                if (start < end) {\r\n                    let temp = list.songs[start];\r\n                    for (let i = start; i < end; i++) {\r\n                        list.songs[i] = list.songs[i + 1];\r\n                    }\r\n                    list.songs[end] = temp;\r\n                }\r\n                else if (start > end) {\r\n                    let temp = list.songs[start];\r\n                    for (let i = start; i > end; i--) {\r\n                        list.songs[i] = list.songs[i - 1];\r\n                    }\r\n                    list.songs[end] = temp;\r\n                }\r\n\r\n                const updatedList = await api.updatePlaylistById(store.currentList._id,list);\r\n                if (updatedList.data.success){\r\n                    store.updateCurrentList();\r\n                }\r\n            }\r\n    \r\n        }\r\n        asyncMoveSong(start,end);\r\n      \r\n\r\n\r\n    }\r\n\r\n    // THIS FUNCTION CREATES A NEW LIST\r\n    store.createNewList = function() {\r\n        async function asyncCreateNewList(){\r\n            const response = await api.createPlaylist();\r\n            if(response.data.success){\r\n                let newPlaylist = response.data.playlist;\r\n                if(response.data.success){\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                        payload: newPlaylist\r\n                    });\r\n                    store.history.push(\"/playlist\" + newPlaylist._id);\r\n                    // store.setNewList(newPlaylist._id);\r\n                }\r\n            }\r\n        }\r\n\r\n        asyncCreateNewList();\r\n\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    response = await api.updatePlaylistById(playlist._id, playlist);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n\r\n\r\n     // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\r\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\r\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\r\n    // showDeleteListModal, and hideDeleteListModal\r\n    store.markListForDeletion = function (id) {\r\n        async function asyncSetDeleteList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n                        payload: playlist\r\n                    });\r\n                    store.showDeleteListModal();\r\n                }\r\n            }\r\n        }\r\n        asyncSetDeleteList(id);\r\n    }\r\n    store.deleteList = function (id) {\r\n        async function processDelete(id) {\r\n            console.log(id);\r\n            let response = await api.deletePlaylistById(id);\r\n            if (response.data.success) {\r\n                store.loadIdNamePairs();\r\n                store.history.push(\"/\");\r\n            }\r\n        }\r\n        processDelete(id);\r\n    }\r\n    store.deleteMarkedList = function() {\r\n        store.deleteList(store.listMarkedForDeletion);\r\n        store.hideDeleteListModal();\r\n    }\r\n    store.showDeleteListModal = function() {\r\n        let modal = document.getElementById(\"delete-modal\");\r\n        modal.classList.add(\"is-visible\");\r\n    }\r\n    store.hideDeleteListModal = function() {\r\n        let modal = document.getElementById(\"delete-modal\");\r\n        modal.classList.remove(\"is-visible\");\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    store.markSongForDeletion = function(index) {\r\n            async function asyncSetSongforDeletion(index){\r\n                const response = await api.getPlaylistById(store.currentList._id)\r\n                if(response.data.success){\r\n                    let playlist = response.data.playlist;\r\n                    let songToDelete = playlist.songs[index];\r\n                     storeReducer({\r\n                    type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\r\n                    payload: songToDelete\r\n                });\r\n\r\n                store.showDeleteSongModal();\r\n            }\r\n\r\n        }\r\n\r\n        asyncSetSongforDeletion(index);\r\n        \r\n    }\r\n\r\n    store.deleteSong = function() {\r\n        async function processDeleteSong(){\r\n            let response = await api.getPlaylistById(store.currentList._id)\r\n            if(response.data.success){\r\n                let playlist = response.data.playlist;\r\n                let newSongs = playlist.songs.filter(song => song._id !== store.deleteSongId)\r\n                playlist.songs = newSongs\r\n                response = await api.updatePlaylistById(store.currentList._id,playlist)\r\n                if(response.data.success){\r\n                    store.updateCurrentList();\r\n                }\r\n            }\r\n        }\r\n        processDeleteSong();\r\n    }\r\n\r\n    store.deleteMarkedSong = function() {\r\n        store.deleteSong();\r\n        store.hideDeleteSongModal();\r\n    }\r\n\r\n\r\n\r\n    store.showDeleteSongModal = function() {\r\n        let modal = document.getElementById(\"delete-song-modal\");\r\n        modal.classList.add(\"is-visible\");\r\n    }\r\n    store.hideDeleteSongModal = function() {\r\n        let modal = document.getElementById(\"delete-song-modal\");\r\n        modal.classList.remove(\"is-visible\");\r\n    }\r\n\r\n\r\n\r\n\r\n    // PROCESS FOR EDITING A SONG\r\n\r\n    store.markSongToEdit = function (index) {\r\n        async function asyncSetSongToEdit(index){\r\n            const response = await api.getPlaylistById(store.currentList._id)\r\n            if(response.data.success){\r\n                 storeReducer({\r\n                    type: GlobalStoreActionType.MARK_SONG_TO_EDIT,\r\n                    payload: index\r\n            });\r\n\r\n            store.setEditInnerText(index);\r\n\r\n            store.showEditSongModal();\r\n        }\r\n\r\n    }\r\n\r\n    asyncSetSongToEdit(index);\r\n}\r\n\r\n    store.editSong = function(index, title, artist, link){\r\n        async function asyncSetSongToEdit(index){\r\n            const response = await api.getPlaylistById(store.currentList._id)\r\n            if(response.data.success){\r\n                let playlist = response.data.playlist;\r\n                let editedSong = playlist.songs[index];\r\n                editedSong.title = title;\r\n                editedSong.artist = artist;\r\n                editedSong.youTubeId = link;\r\n                playlist.songs[index] = editedSong;\r\n\r\n                let updatedPlaylist = await api.updatePlaylistById(store.currentList._id,playlist);\r\n\r\n                if(updatedPlaylist.data.success){\r\n                    store.updateCurrentList();\r\n                }\r\n        }\r\n    }\r\n    asyncSetSongToEdit(index);\r\n}\r\n\r\n    store.editMarkedSong = function (title, artist, link) {\r\n        store.editSong(store.songEditIndex, title, artist, link);\r\n        store.hideEditSongModal();\r\n    }\r\n\r\n\r\n    store.setEditInnerText = function(index) {\r\n        let curSong = store.currentList.songs[index];\r\n        console.log(curSong.title);\r\n        document.getElementById('edit-song-modal-title-textfield').value = curSong.title;\r\n        document.getElementById('edit-song-modal-artist-textfield').value = curSong.artist;\r\n        document.getElementById('edit-song-modal-youTubeId-textfield').value = curSong.youTubeId;\r\n    }\r\n\r\n\r\n    store.showEditSongModal = function() {\r\n        let modal = document.getElementById(\"edit-song-modal\");\r\n        modal.classList.add(\"is-visible\");\r\n    }\r\n\r\n    store.hideEditSongModal = function() {\r\n        let modal = document.getElementById(\"edit-song-modal\");\r\n        modal.classList.remove(\"is-visible\");\r\n    }\r\n\r\n\r\n\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist\r\n                    });\r\n                    store.history.push(\"/playlist/\" + playlist._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n    store.getPlaylistSize = function() {\r\n        return store.currentList.songs.length;\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setlistNameActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    store.setIsListNameEditActive = function() {\r\n        store.setlistNameActive();\r\n    }\r\n\r\n    store.updateCurrentList = function() {\r\n        async function asyncUpdateCurrentList() {\r\n            let response = await api.getPlaylistById(store.currentList._id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        asyncUpdateCurrentList();\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}