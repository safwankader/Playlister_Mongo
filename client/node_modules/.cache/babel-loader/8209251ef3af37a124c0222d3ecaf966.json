{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listMarkedForDeletion: null,\n    deleteListName: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            deleteListName: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            deleteListName: null\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            deleteListName: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            deleteListName: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: payload._id,\n            deleteListName: payload.name\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            deleteListName: null\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listMarkedForDeletion: null,\n            deleteListName: null\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  store.addSong = function () {\n    let id = store.currentList._id;\n    async function asyncAddSong(id) {\n      const response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        let newPlaylist = JSON.parse(JSON.stringify(playlist));\n        newPlaylist.songs.push({\n          title: \"Untitled\",\n          artist: \"Unknown\",\n          youTubeId: \"dQw4w9WgXcQ\"\n        });\n        const addedSong = await api.updatePlaylistById(id, newPlaylist);\n        if (addedSong.data.success) {\n          store.updateCurrentList();\n        }\n      }\n    }\n    asyncAddSong(id);\n  };\n\n  // THIS FUNCTION CREATES A NEW LIST\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      const response = await api.createPlaylist();\n      if (response.data.success) {\n        let newPlaylist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.CREATE_NEW_LIST,\n            payload: newPlaylist\n          });\n          store.history.push(\"/playlist\" + newPlaylist._id);\n        }\n      }\n    }\n    asyncCreateNewList();\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n  store.markListForDeletion = function (id) {\n    async function asyncSetDeleteList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: playlist\n          });\n          store.showDeleteListModal();\n        }\n      }\n    }\n    asyncSetDeleteList(id);\n  };\n  store.deleteList = function (id) {\n    async function processDelete(id) {\n      console.log(id);\n      let response = await api.deletePlaylistById(id);\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        store.history.push(\"/\");\n      }\n    }\n    processDelete(id);\n  };\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n    store.hideDeleteListModal();\n  };\n  store.showDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.setIsListNameEditActive = function () {\n    store.setlistNameActive();\n  };\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n        }\n      }\n    }\n    asyncUpdateCurrentList();\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"AlStAgXunsonNeAyStkQS0wAbwA=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listMarkedForDeletion","deleteListName","storeReducer","action","type","payload","_id","name","addSong","id","asyncAddSong","response","getPlaylistById","data","success","playlist","newPlaylist","JSON","parse","stringify","songs","push","title","artist","youTubeId","addedSong","updatePlaylistById","updateCurrentList","createNewList","asyncCreateNewList","createPlaylist","history","changeListName","newName","asyncChangeListName","updateList","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","markListForDeletion","asyncSetDeleteList","showDeleteListModal","deleteList","processDelete","console","log","deletePlaylistById","loadIdNamePairs","deleteMarkedList","hideDeleteListModal","modal","document","getElementById","classList","add","remove","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setlistNameActive","setIsListNameEditActive","asyncUpdateCurrentList"],"sources":["C:/Users/skade/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    MARK_LIST_FOR_DELETION : \"MARK_LIST_FOR_DELETION\"\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        listMarkedForDeletion: null,\r\n        deleteListName : null\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listMarkedForDeletion: null,\r\n                    deleteListName : null\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listMarkedForDeletion: null,\r\n                    deleteListName : null\r\n                })\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false,\r\n                    listMarkedForDeletion: null,\r\n                    deleteListName : null\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listMarkedForDeletion: null,\r\n                    deleteListName : null\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listMarkedForDeletion: payload._id,\r\n                    deleteListName : payload.name\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    listMarkedForDeletion: null,\r\n                    deleteListName : null\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true,\r\n                    listMarkedForDeletion: null,\r\n                    deleteListName : null\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    store.addSong = function() {\r\n        let id = store.currentList._id;\r\n        async function asyncAddSong(id) {\r\n            const response = await api.getPlaylistById(id);\r\n            \r\n            if(response.data.success){\r\n                let playlist = response.data.playlist;\r\n                let newPlaylist = JSON.parse(JSON.stringify(playlist));\r\n                newPlaylist.songs.push({\r\n                    title: \"Untitled\",\r\n                    artist: \"Unknown\",\r\n                    youTubeId: \"dQw4w9WgXcQ\"\r\n                });\r\n                const addedSong = await api.updatePlaylistById(id,newPlaylist);\r\n                if (addedSong.data.success){\r\n                    store.updateCurrentList();\r\n                    }\r\n                }\r\n            }\r\n            asyncAddSong(id);\r\n        }\r\n\r\n    // THIS FUNCTION CREATES A NEW LIST\r\n    store.createNewList = function() {\r\n        async function asyncCreateNewList(){\r\n            const response = await api.createPlaylist();\r\n            if(response.data.success){\r\n                let newPlaylist = response.data.playlist;\r\n                if(response.data.success){\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                        payload: newPlaylist\r\n                    });\r\n                    store.history.push(\"/playlist\" + newPlaylist._id);\r\n                }\r\n            }\r\n        }\r\n\r\n        asyncCreateNewList();\r\n\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    response = await api.updatePlaylistById(playlist._id, playlist);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n\r\n\r\n     // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\r\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\r\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\r\n    // showDeleteListModal, and hideDeleteListModal\r\n    store.markListForDeletion = function (id) {\r\n        async function asyncSetDeleteList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n                        payload: playlist\r\n                    });\r\n                    store.showDeleteListModal();\r\n                }\r\n            }\r\n        }\r\n        asyncSetDeleteList(id);\r\n    }\r\n    store.deleteList = function (id) {\r\n        async function processDelete(id) {\r\n            console.log(id);\r\n            let response = await api.deletePlaylistById(id);\r\n            if (response.data.success) {\r\n                store.loadIdNamePairs();\r\n                store.history.push(\"/\");\r\n            }\r\n        }\r\n        processDelete(id);\r\n    }\r\n    store.deleteMarkedList = function() {\r\n        store.deleteList(store.listMarkedForDeletion);\r\n        store.hideDeleteListModal();\r\n    }\r\n    store.showDeleteListModal = function() {\r\n        let modal = document.getElementById(\"delete-modal\");\r\n        modal.classList.add(\"is-visible\");\r\n    }\r\n    store.hideDeleteListModal = function() {\r\n        let modal = document.getElementById(\"delete-modal\");\r\n        modal.classList.remove(\"is-visible\");\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist\r\n                    });\r\n                    store.history.push(\"/playlist/\" + playlist._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.getPlaylistSize = function() {\r\n        return store.currentList.songs.length;\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setlistNameActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    store.setIsListNameEditActive = function() {\r\n        store.setlistNameActive();\r\n    }\r\n\r\n    store.updateCurrentList = function() {\r\n        async function asyncUpdateCurrentList() {\r\n            let response = await api.getPlaylistById(store.currentList._id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        asyncUpdateCurrentList();\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}